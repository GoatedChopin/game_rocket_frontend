import { SvelteComponentTyped } from "svelte";
import type { MultiSelectEvents, Option } from './';
declare const __propDef: {
    props: {
        activeIndex?: number | null | undefined;
        activeOption?: Option | null | undefined;
        addOptionMsg?: string | undefined;
        allowUserOptions?: boolean | "append" | undefined;
        autocomplete?: string | undefined;
        autoScroll?: boolean | undefined;
        breakpoint?: number | undefined;
        defaultDisabledTitle?: string | undefined;
        disabled?: boolean | undefined;
        disabledInputTitle?: string | undefined;
        duplicateFunc?: ((op1: Option, op2: Option) => boolean) | undefined;
        duplicateOptionMsg?: string | undefined;
        duplicates?: boolean | undefined;
        filterFunc?: ((op: Option, searchText: string) => boolean) | undefined;
        focusInputOnSelect?: boolean | "desktop" | undefined;
        id?: string | null | undefined;
        input?: HTMLInputElement | null | undefined;
        inputClass?: string | undefined;
        inputmode?: string | null | undefined;
        invalid?: boolean | undefined;
        liActiveOptionClass?: string | undefined;
        liOptionClass?: string | undefined;
        liSelectedClass?: string | undefined;
        loading?: boolean | undefined;
        matchingOptions?: Option[] | undefined;
        maxSelect?: number | null | undefined;
        maxSelectMsg?: ((current: number, max: number) => string) | null | undefined;
        name?: string | null | undefined;
        noMatchingOptionsMsg?: string | undefined;
        open?: boolean | undefined;
        options: Option[];
        outerDiv?: HTMLDivElement | null | undefined;
        outerDivClass?: string | undefined;
        parseLabelsAsHtml?: boolean | undefined;
        pattern?: string | null | undefined;
        placeholder?: string | null | undefined;
        removeAllTitle?: string | undefined;
        removeBtnTitle?: string | undefined;
        required?: boolean | undefined;
        resetFilterOnAdd?: boolean | undefined;
        searchText?: string | undefined;
        selected?: Option[] | undefined;
        sortSelected?: boolean | ((op1: Option, op2: Option) => number) | undefined;
        ulOptionsClass?: string | undefined;
        ulSelectedClass?: string | undefined;
        value?: Option | Option[] | null | undefined;
    };
    slots: {
        selected: {
            option: Option;
            idx: any;
        };
        'remove-icon': {};
        spinner: {};
        'disabled-icon': {};
        option: {
            option: Option;
            idx: any;
        };
    };
    getters: {};
    events: MultiSelectEvents;
};
export declare type MultiSelectProps = typeof __propDef.props;
export declare type MultiSelectEvents = typeof __propDef.events;
export declare type MultiSelectSlots = typeof __propDef.slots;
export default class MultiSelect extends SvelteComponentTyped<MultiSelectProps, MultiSelectEvents, MultiSelectSlots> {
}
export {};
